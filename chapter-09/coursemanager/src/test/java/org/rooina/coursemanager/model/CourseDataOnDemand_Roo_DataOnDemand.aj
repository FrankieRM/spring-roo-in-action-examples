// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooina.coursemanager.model;

import java.util.List;
import java.util.Random;
import org.rooina.coursemanager.model.Course;
import org.rooina.coursemanager.model.TrainingProgramDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CourseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CourseDataOnDemand: @Component;
    
    private Random CourseDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Course> CourseDataOnDemand.data;
    
    @Autowired
    private TrainingProgramDataOnDemand CourseDataOnDemand.trainingProgramDataOnDemand;
    
    public Course CourseDataOnDemand.getNewTransientCourse(int index) {
        org.rooina.coursemanager.model.Course obj = new org.rooina.coursemanager.model.Course();
        setName(obj, index);
        setDescription(obj, index);
        setMaxiumumCapacity(obj, index);
        setCourseType(obj, index);
        setTrainingProgram(obj, index);
        setCreatedDate(obj, index);
        return obj;
    }
    
    public void CourseDataOnDemand.setName(Course obj, int index) {
        java.lang.String name = "name_" + index;
        if (name.length() > 60) {
            name = name.substring(0, 60);
        }
        obj.setName(name);
    }
    
    public void CourseDataOnDemand.setDescription(Course obj, int index) {
        java.lang.String description = "description_" + index;
        if (description.length() > 1000) {
            description = description.substring(0, 1000);
        }
        obj.setDescription(description);
    }
    
    public void CourseDataOnDemand.setMaxiumumCapacity(Course obj, int index) {
        java.lang.Integer maxiumumCapacity = new Integer(index);
        if (maxiumumCapacity < 1 || maxiumumCapacity > 9999) {
            maxiumumCapacity = 9999;
        }
        obj.setMaxiumumCapacity(maxiumumCapacity);
    }
    
    public void CourseDataOnDemand.setCourseType(Course obj, int index) {
        org.rooina.coursemanager.model.CourseTypeEnum courseType = org.rooina.coursemanager.model.CourseTypeEnum.class.getEnumConstants()[0];
        obj.setCourseType(courseType);
    }
    
    public void CourseDataOnDemand.setTrainingProgram(Course obj, int index) {
        org.rooina.coursemanager.model.TrainingProgram trainingProgram = trainingProgramDataOnDemand.getRandomTrainingProgram();
        obj.setTrainingProgram(trainingProgram);
    }
    
    public void CourseDataOnDemand.setCreatedDate(Course obj, int index) {
        java.util.Date createdDate = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public Course CourseDataOnDemand.getSpecificCourse(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Course obj = data.get(index);
        return Course.findCourse(obj.getId());
    }
    
    public Course CourseDataOnDemand.getRandomCourse() {
        init();
        Course obj = data.get(rnd.nextInt(data.size()));
        return Course.findCourse(obj.getId());
    }
    
    public boolean CourseDataOnDemand.modifyCourse(Course obj) {
        return false;
    }
    
    public void CourseDataOnDemand.init() {
        data = org.rooina.coursemanager.model.Course.findCourseEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Course' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.rooina.coursemanager.model.Course>();
        for (int i = 0; i < 10; i++) {
            org.rooina.coursemanager.model.Course obj = getNewTransientCourse(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
