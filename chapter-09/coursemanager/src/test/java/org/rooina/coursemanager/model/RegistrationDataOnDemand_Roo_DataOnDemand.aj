// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooina.coursemanager.model;

import java.util.List;
import java.util.Random;
import org.rooina.coursemanager.model.CourseDataOnDemand;
import org.rooina.coursemanager.model.Registration;
import org.rooina.coursemanager.model.StudentDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RegistrationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RegistrationDataOnDemand: @Component;
    
    private Random RegistrationDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Registration> RegistrationDataOnDemand.data;
    
    @Autowired
    private StudentDataOnDemand RegistrationDataOnDemand.studentDataOnDemand;
    
    @Autowired
    private CourseDataOnDemand RegistrationDataOnDemand.courseDataOnDemand;
    
    public Registration RegistrationDataOnDemand.getNewTransientRegistration(int index) {
        org.rooina.coursemanager.model.Registration obj = new org.rooina.coursemanager.model.Registration();
        setStudent(obj, index);
        setCourse(obj, index);
        setPaymentMade(obj, index);
        setAttended(obj, index);
        return obj;
    }
    
    public void RegistrationDataOnDemand.setStudent(Registration obj, int index) {
        org.rooina.coursemanager.model.Student student = studentDataOnDemand.getRandomStudent();
        obj.setStudent(student);
    }
    
    public void RegistrationDataOnDemand.setCourse(Registration obj, int index) {
        org.rooina.coursemanager.model.Course course = courseDataOnDemand.getRandomCourse();
        obj.setCourse(course);
    }
    
    public void RegistrationDataOnDemand.setPaymentMade(Registration obj, int index) {
        java.lang.Boolean paymentMade = true;
        obj.setPaymentMade(paymentMade);
    }
    
    public void RegistrationDataOnDemand.setAttended(Registration obj, int index) {
        java.lang.Boolean attended = true;
        obj.setAttended(attended);
    }
    
    public Registration RegistrationDataOnDemand.getSpecificRegistration(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Registration obj = data.get(index);
        return Registration.findRegistration(obj.getId());
    }
    
    public Registration RegistrationDataOnDemand.getRandomRegistration() {
        init();
        Registration obj = data.get(rnd.nextInt(data.size()));
        return Registration.findRegistration(obj.getId());
    }
    
    public boolean RegistrationDataOnDemand.modifyRegistration(Registration obj) {
        return false;
    }
    
    public void RegistrationDataOnDemand.init() {
        data = org.rooina.coursemanager.model.Registration.findRegistrationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Registration' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.rooina.coursemanager.model.Registration>();
        for (int i = 0; i < 10; i++) {
            org.rooina.coursemanager.model.Registration obj = getNewTransientRegistration(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
