// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooina.coursemanager.model;

import java.util.List;
import java.util.Random;
import org.rooina.coursemanager.model.CourseDataOnDemand;
import org.rooina.coursemanager.model.PeriodicCourse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PeriodicCourseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PeriodicCourseDataOnDemand: @Component;
    
    private Random PeriodicCourseDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<PeriodicCourse> PeriodicCourseDataOnDemand.data;
    
    @Autowired
    private CourseDataOnDemand PeriodicCourseDataOnDemand.courseDataOnDemand;
    
    public PeriodicCourse PeriodicCourseDataOnDemand.getNewTransientPeriodicCourse(int index) {
        org.rooina.coursemanager.model.PeriodicCourse obj = new org.rooina.coursemanager.model.PeriodicCourse();
        setCourse(obj, index);
        setLocation(obj, index);
        setStartDate(obj, index);
        setFrequency(obj, index);
        setEndDate(obj, index);
        return obj;
    }
    
    public void PeriodicCourseDataOnDemand.setCourse(PeriodicCourse obj, int index) {
        org.rooina.coursemanager.model.Course course = courseDataOnDemand.getRandomCourse();
        obj.setCourse(course);
    }
    
    public void PeriodicCourseDataOnDemand.setLocation(PeriodicCourse obj, int index) {
        java.lang.String location = "location_" + index;
        obj.setLocation(location);
    }
    
    public void PeriodicCourseDataOnDemand.setStartDate(PeriodicCourse obj, int index) {
        java.util.Date startDate = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void PeriodicCourseDataOnDemand.setFrequency(PeriodicCourse obj, int index) {
        org.rooina.coursemanager.model.FrequencyType frequency = org.rooina.coursemanager.model.FrequencyType.class.getEnumConstants()[0];
        obj.setFrequency(frequency);
    }
    
    public void PeriodicCourseDataOnDemand.setEndDate(PeriodicCourse obj, int index) {
        java.util.Date endDate = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public PeriodicCourse PeriodicCourseDataOnDemand.getSpecificPeriodicCourse(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        PeriodicCourse obj = data.get(index);
        return PeriodicCourse.findPeriodicCourse(obj.getId());
    }
    
    public PeriodicCourse PeriodicCourseDataOnDemand.getRandomPeriodicCourse() {
        init();
        PeriodicCourse obj = data.get(rnd.nextInt(data.size()));
        return PeriodicCourse.findPeriodicCourse(obj.getId());
    }
    
    public boolean PeriodicCourseDataOnDemand.modifyPeriodicCourse(PeriodicCourse obj) {
        return false;
    }
    
    public void PeriodicCourseDataOnDemand.init() {
        data = org.rooina.coursemanager.model.PeriodicCourse.findPeriodicCourseEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'PeriodicCourse' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.rooina.coursemanager.model.PeriodicCourse>();
        for (int i = 0; i < 10; i++) {
            org.rooina.coursemanager.model.PeriodicCourse obj = getNewTransientPeriodicCourse(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
