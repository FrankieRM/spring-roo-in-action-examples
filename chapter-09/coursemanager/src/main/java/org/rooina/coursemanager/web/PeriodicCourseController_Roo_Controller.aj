// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooina.coursemanager.web;

import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.rooina.coursemanager.model.Course;
import org.rooina.coursemanager.model.FrequencyType;
import org.rooina.coursemanager.model.PeriodicCourse;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PeriodicCourseController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String PeriodicCourseController.create(@Valid PeriodicCourse periodicCourse, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("periodicCourse", periodicCourse);
            addDateTimeFormatPatterns(uiModel);
            return "periodiccourses/create";
        }
        uiModel.asMap().clear();
        periodicCourse.persist();
        return "redirect:/periodiccourses/" + encodeUrlPathSegment(periodicCourse.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PeriodicCourseController.createForm(Model uiModel) {
        uiModel.addAttribute("periodicCourse", new PeriodicCourse());
        addDateTimeFormatPatterns(uiModel);
        return "periodiccourses/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PeriodicCourseController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("periodiccourse", PeriodicCourse.findPeriodicCourse(id));
        uiModel.addAttribute("itemId", id);
        return "periodiccourses/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PeriodicCourseController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("periodiccourses", PeriodicCourse.findPeriodicCourseEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) PeriodicCourse.countPeriodicCourses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("periodiccourses", PeriodicCourse.findAllPeriodicCourses());
        }
        addDateTimeFormatPatterns(uiModel);
        return "periodiccourses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PeriodicCourseController.update(@Valid PeriodicCourse periodicCourse, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("periodicCourse", periodicCourse);
            addDateTimeFormatPatterns(uiModel);
            return "periodiccourses/update";
        }
        uiModel.asMap().clear();
        periodicCourse.merge();
        return "redirect:/periodiccourses/" + encodeUrlPathSegment(periodicCourse.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String PeriodicCourseController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("periodicCourse", PeriodicCourse.findPeriodicCourse(id));
        addDateTimeFormatPatterns(uiModel);
        return "periodiccourses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String PeriodicCourseController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PeriodicCourse.findPeriodicCourse(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/periodiccourses";
    }
    
    @ModelAttribute("courses")
    public Collection<Course> PeriodicCourseController.populateCourses() {
        return Course.findAllCourses();
    }
    
    @ModelAttribute("frequencytypes")
    public Collection<FrequencyType> PeriodicCourseController.populateFrequencyTypes() {
        return Arrays.asList(FrequencyType.class.getEnumConstants());
    }
    
    @ModelAttribute("periodiccourses")
    public Collection<PeriodicCourse> PeriodicCourseController.populatePeriodicCourses() {
        return PeriodicCourse.findAllPeriodicCourses();
    }
    
    void PeriodicCourseController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("periodicCourse_startdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("periodicCourse_enddate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String PeriodicCourseController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
