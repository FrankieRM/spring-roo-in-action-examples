// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rooinaction.cmsapp.domain;

import com.rooinaction.cmsapp.domain.CourseCatalog;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CourseCatalog_Roo_Entity {
    
    declare @type: CourseCatalog: @Entity;
    
    @PersistenceContext
    transient EntityManager CourseCatalog.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long CourseCatalog.id;
    
    @Version
    @Column(name = "version")
    private Integer CourseCatalog.version;
    
    public Long CourseCatalog.getId() {
        return this.id;
    }
    
    public void CourseCatalog.setId(Long id) {
        this.id = id;
    }
    
    public Integer CourseCatalog.getVersion() {
        return this.version;
    }
    
    public void CourseCatalog.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void CourseCatalog.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void CourseCatalog.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CourseCatalog attached = CourseCatalog.findCourseCatalog(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CourseCatalog.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public CourseCatalog CourseCatalog.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CourseCatalog merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager CourseCatalog.entityManager() {
        EntityManager em = new CourseCatalog().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CourseCatalog.countCourseCatalogs() {
        return entityManager().createQuery("select count(o) from CourseCatalog o", Long.class).getSingleResult();
    }
    
    public static List<CourseCatalog> CourseCatalog.findAllCourseCatalogs() {
        return entityManager().createQuery("select o from CourseCatalog o", CourseCatalog.class).getResultList();
    }
    
    public static CourseCatalog CourseCatalog.findCourseCatalog(Long id) {
        if (id == null) return null;
        return entityManager().find(CourseCatalog.class, id);
    }
    
    public static List<CourseCatalog> CourseCatalog.findCourseCatalogEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from CourseCatalog o", CourseCatalog.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
