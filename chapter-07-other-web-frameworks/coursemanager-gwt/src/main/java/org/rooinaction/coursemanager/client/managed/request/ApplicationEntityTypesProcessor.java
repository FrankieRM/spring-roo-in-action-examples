// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package org.rooinaction.coursemanager.client.managed.request;

import com.google.web.bindery.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import org.rooinaction.coursemanager.web.gwt.proxies.CourseProxy;
import org.rooinaction.coursemanager.web.gwt.proxies.InstructorProxy;
import org.rooinaction.coursemanager.web.gwt.proxies.OfferingProxy;
import org.rooinaction.coursemanager.web.gwt.proxies.RegistrationProxy;
import org.rooinaction.coursemanager.web.gwt.proxies.StudentProxy;
import org.rooinaction.coursemanager.web.gwt.proxies.TagProxy;
import org.rooinaction.coursemanager.web.gwt.proxies.TrainingProgramProxy;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<java.lang.Class<? extends com.google.web.bindery.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(CourseProxy.class);
        rtn.add(InstructorProxy.class);
        rtn.add(OfferingProxy.class);
        rtn.add(RegistrationProxy.class);
        rtn.add(StudentProxy.class);
        rtn.add(TagProxy.class);
        rtn.add(TrainingProgramProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(org.rooinaction.coursemanager.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (CourseProxy.class.equals(clazz)) {
            processor.handleCourse((CourseProxy) null);
            return;
        }
        if (InstructorProxy.class.equals(clazz)) {
            processor.handleInstructor((InstructorProxy) null);
            return;
        }
        if (OfferingProxy.class.equals(clazz)) {
            processor.handleOffering((OfferingProxy) null);
            return;
        }
        if (RegistrationProxy.class.equals(clazz)) {
            processor.handleRegistration((RegistrationProxy) null);
            return;
        }
        if (StudentProxy.class.equals(clazz)) {
            processor.handleStudent((StudentProxy) null);
            return;
        }
        if (TagProxy.class.equals(clazz)) {
            processor.handleTag((TagProxy) null);
            return;
        }
        if (TrainingProgramProxy.class.equals(clazz)) {
            processor.handleTrainingProgram((TrainingProgramProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(org.rooinaction.coursemanager.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof CourseProxy) {
            processor.handleCourse((CourseProxy) proxy);
            return;
        }
        if (proxy instanceof InstructorProxy) {
            processor.handleInstructor((InstructorProxy) proxy);
            return;
        }
        if (proxy instanceof OfferingProxy) {
            processor.handleOffering((OfferingProxy) proxy);
            return;
        }
        if (proxy instanceof RegistrationProxy) {
            processor.handleRegistration((RegistrationProxy) proxy);
            return;
        }
        if (proxy instanceof StudentProxy) {
            processor.handleStudent((StudentProxy) proxy);
            return;
        }
        if (proxy instanceof TagProxy) {
            processor.handleTag((TagProxy) proxy);
            return;
        }
        if (proxy instanceof TrainingProgramProxy) {
            processor.handleTrainingProgram((TrainingProgramProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleCourse(CourseProxy proxy);

    public abstract void handleInstructor(InstructorProxy proxy);

    public abstract void handleOffering(OfferingProxy proxy);

    public abstract void handleRegistration(RegistrationProxy proxy);

    public abstract void handleStudent(StudentProxy proxy);

    public abstract void handleTag(TagProxy proxy);

    public abstract void handleTrainingProgram(TrainingProgramProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
