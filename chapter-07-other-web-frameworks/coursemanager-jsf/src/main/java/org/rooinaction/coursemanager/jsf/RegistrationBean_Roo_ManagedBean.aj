// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.jsf;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.rooinaction.coursemanager.jsf.RegistrationBean;
import org.rooinaction.coursemanager.jsf.converter.OfferingConverter;
import org.rooinaction.coursemanager.jsf.converter.StudentConverter;
import org.rooinaction.coursemanager.jsf.util.MessageFactory;
import org.rooinaction.coursemanager.model.Offering;
import org.rooinaction.coursemanager.model.Registration;
import org.rooinaction.coursemanager.model.Student;

privileged aspect RegistrationBean_Roo_ManagedBean {
    
    declare @type: RegistrationBean: @ManagedBean(name = "registrationBean");
    
    declare @type: RegistrationBean: @SessionScoped;
    
    private String RegistrationBean.name = "Registrations";
    
    private Registration RegistrationBean.registration;
    
    private List<Registration> RegistrationBean.allRegistrations;
    
    private boolean RegistrationBean.dataVisible = false;
    
    private List<String> RegistrationBean.columns;
    
    private HtmlPanelGrid RegistrationBean.createPanelGrid;
    
    private HtmlPanelGrid RegistrationBean.editPanelGrid;
    
    private HtmlPanelGrid RegistrationBean.viewPanelGrid;
    
    private boolean RegistrationBean.createDialogVisible = false;
    
    @PostConstruct
    public void RegistrationBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String RegistrationBean.getName() {
        return name;
    }
    
    public List<String> RegistrationBean.getColumns() {
        return columns;
    }
    
    public List<Registration> RegistrationBean.getAllRegistrations() {
        return allRegistrations;
    }
    
    public void RegistrationBean.setAllRegistrations(List<Registration> allRegistrations) {
        this.allRegistrations = allRegistrations;
    }
    
    public String RegistrationBean.findAllRegistrations() {
        allRegistrations = Registration.findAllRegistrations();
        dataVisible = !allRegistrations.isEmpty();
        return null;
    }
    
    public boolean RegistrationBean.isDataVisible() {
        return dataVisible;
    }
    
    public void RegistrationBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid RegistrationBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void RegistrationBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid RegistrationBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void RegistrationBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid RegistrationBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void RegistrationBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid RegistrationBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel studentCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        studentCreateOutput.setFor("studentCreateInput");
        studentCreateOutput.setId("studentCreateOutput");
        studentCreateOutput.setValue("Student:");
        htmlPanelGrid.getChildren().add(studentCreateOutput);
        
        AutoComplete studentCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        studentCreateInput.setId("studentCreateInput");
        studentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.student}", Student.class));
        studentCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{registrationBean.completeStudent}", List.class, new Class[] { String.class }));
        studentCreateInput.setDropdown(true);
        studentCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "student", String.class));
        studentCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{student.firstName} #{student.middleNameOrInitial} #{student.lastName} #{student.addressLine1}", String.class));
        studentCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{student}", Student.class));
        studentCreateInput.setConverter(new StudentConverter());
        studentCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(studentCreateInput);
        
        Message studentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentCreateInputMessage.setId("studentCreateInputMessage");
        studentCreateInputMessage.setFor("studentCreateInput");
        studentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentCreateInputMessage);
        
        OutputLabel offeringCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        offeringCreateOutput.setFor("offeringCreateInput");
        offeringCreateOutput.setId("offeringCreateOutput");
        offeringCreateOutput.setValue("Offering:");
        htmlPanelGrid.getChildren().add(offeringCreateOutput);
        
        AutoComplete offeringCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        offeringCreateInput.setId("offeringCreateInput");
        offeringCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.offering}", Offering.class));
        offeringCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{registrationBean.completeOffering}", List.class, new Class[] { String.class }));
        offeringCreateInput.setDropdown(true);
        offeringCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "offering", String.class));
        offeringCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{offering.runDate}", String.class));
        offeringCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{offering}", Offering.class));
        offeringCreateInput.setConverter(new OfferingConverter());
        offeringCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(offeringCreateInput);
        
        Message offeringCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        offeringCreateInputMessage.setId("offeringCreateInputMessage");
        offeringCreateInputMessage.setFor("offeringCreateInput");
        offeringCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(offeringCreateInputMessage);
        
        OutputLabel paymentMadeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paymentMadeCreateOutput.setFor("paymentMadeCreateInput");
        paymentMadeCreateOutput.setId("paymentMadeCreateOutput");
        paymentMadeCreateOutput.setValue("Payment Made:");
        htmlPanelGrid.getChildren().add(paymentMadeCreateOutput);
        
        SelectBooleanCheckbox paymentMadeCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        paymentMadeCreateInput.setId("paymentMadeCreateInput");
        paymentMadeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.paymentMade}", Boolean.class));
        paymentMadeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(paymentMadeCreateInput);
        
        Message paymentMadeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paymentMadeCreateInputMessage.setId("paymentMadeCreateInputMessage");
        paymentMadeCreateInputMessage.setFor("paymentMadeCreateInput");
        paymentMadeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paymentMadeCreateInputMessage);
        
        OutputLabel attendedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        attendedCreateOutput.setFor("attendedCreateInput");
        attendedCreateOutput.setId("attendedCreateOutput");
        attendedCreateOutput.setValue("Attended:");
        htmlPanelGrid.getChildren().add(attendedCreateOutput);
        
        SelectBooleanCheckbox attendedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        attendedCreateInput.setId("attendedCreateInput");
        attendedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.attended}", Boolean.class));
        attendedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(attendedCreateInput);
        
        Message attendedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        attendedCreateInputMessage.setId("attendedCreateInputMessage");
        attendedCreateInputMessage.setFor("attendedCreateInput");
        attendedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(attendedCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid RegistrationBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel studentEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        studentEditOutput.setFor("studentEditInput");
        studentEditOutput.setId("studentEditOutput");
        studentEditOutput.setValue("Student:");
        htmlPanelGrid.getChildren().add(studentEditOutput);
        
        AutoComplete studentEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        studentEditInput.setId("studentEditInput");
        studentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.student}", Student.class));
        studentEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{registrationBean.completeStudent}", List.class, new Class[] { String.class }));
        studentEditInput.setDropdown(true);
        studentEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "student", String.class));
        studentEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{student.firstName} #{student.middleNameOrInitial} #{student.lastName} #{student.addressLine1}", String.class));
        studentEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{student}", Student.class));
        studentEditInput.setConverter(new StudentConverter());
        studentEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(studentEditInput);
        
        Message studentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentEditInputMessage.setId("studentEditInputMessage");
        studentEditInputMessage.setFor("studentEditInput");
        studentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentEditInputMessage);
        
        OutputLabel offeringEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        offeringEditOutput.setFor("offeringEditInput");
        offeringEditOutput.setId("offeringEditOutput");
        offeringEditOutput.setValue("Offering:");
        htmlPanelGrid.getChildren().add(offeringEditOutput);
        
        AutoComplete offeringEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        offeringEditInput.setId("offeringEditInput");
        offeringEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.offering}", Offering.class));
        offeringEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{registrationBean.completeOffering}", List.class, new Class[] { String.class }));
        offeringEditInput.setDropdown(true);
        offeringEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "offering", String.class));
        offeringEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{offering.runDate}", String.class));
        offeringEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{offering}", Offering.class));
        offeringEditInput.setConverter(new OfferingConverter());
        offeringEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(offeringEditInput);
        
        Message offeringEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        offeringEditInputMessage.setId("offeringEditInputMessage");
        offeringEditInputMessage.setFor("offeringEditInput");
        offeringEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(offeringEditInputMessage);
        
        OutputLabel paymentMadeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paymentMadeEditOutput.setFor("paymentMadeEditInput");
        paymentMadeEditOutput.setId("paymentMadeEditOutput");
        paymentMadeEditOutput.setValue("Payment Made:");
        htmlPanelGrid.getChildren().add(paymentMadeEditOutput);
        
        SelectBooleanCheckbox paymentMadeEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        paymentMadeEditInput.setId("paymentMadeEditInput");
        paymentMadeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.paymentMade}", Boolean.class));
        paymentMadeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(paymentMadeEditInput);
        
        Message paymentMadeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paymentMadeEditInputMessage.setId("paymentMadeEditInputMessage");
        paymentMadeEditInputMessage.setFor("paymentMadeEditInput");
        paymentMadeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paymentMadeEditInputMessage);
        
        OutputLabel attendedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        attendedEditOutput.setFor("attendedEditInput");
        attendedEditOutput.setId("attendedEditOutput");
        attendedEditOutput.setValue("Attended:");
        htmlPanelGrid.getChildren().add(attendedEditOutput);
        
        SelectBooleanCheckbox attendedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        attendedEditInput.setId("attendedEditInput");
        attendedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.attended}", Boolean.class));
        attendedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(attendedEditInput);
        
        Message attendedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        attendedEditInputMessage.setId("attendedEditInputMessage");
        attendedEditInputMessage.setFor("attendedEditInput");
        attendedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(attendedEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid RegistrationBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText studentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentLabel.setId("studentLabel");
        studentLabel.setValue("Student:");
        htmlPanelGrid.getChildren().add(studentLabel);
        
        HtmlOutputText studentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.student}", Student.class));
        studentValue.setConverter(new StudentConverter());
        htmlPanelGrid.getChildren().add(studentValue);
        
        HtmlOutputText offeringLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringLabel.setId("offeringLabel");
        offeringLabel.setValue("Offering:");
        htmlPanelGrid.getChildren().add(offeringLabel);
        
        HtmlOutputText offeringValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.offering}", Offering.class));
        offeringValue.setConverter(new OfferingConverter());
        htmlPanelGrid.getChildren().add(offeringValue);
        
        HtmlOutputText paymentMadeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paymentMadeLabel.setId("paymentMadeLabel");
        paymentMadeLabel.setValue("Payment Made:");
        htmlPanelGrid.getChildren().add(paymentMadeLabel);
        
        HtmlOutputText paymentMadeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paymentMadeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.paymentMade}", String.class));
        htmlPanelGrid.getChildren().add(paymentMadeValue);
        
        HtmlOutputText attendedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendedLabel.setId("attendedLabel");
        attendedLabel.setValue("Attended:");
        htmlPanelGrid.getChildren().add(attendedLabel);
        
        HtmlOutputText attendedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{registrationBean.registration.attended}", String.class));
        htmlPanelGrid.getChildren().add(attendedValue);
        
        return htmlPanelGrid;
    }
    
    public Registration RegistrationBean.getRegistration() {
        if (registration == null) {
            registration = new Registration();
        }
        return registration;
    }
    
    public void RegistrationBean.setRegistration(Registration registration) {
        this.registration = registration;
    }
    
    public List<Student> RegistrationBean.completeStudent(String query) {
        List<Student> suggestions = new ArrayList<Student>();
        for (Student student : Student.findAllStudents()) {
            String studentStr = String.valueOf(student.getFirstName() +  " "  + student.getMiddleNameOrInitial() +  " "  + student.getLastName() +  " "  + student.getAddressLine1());
            if (studentStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(student);
            }
        }
        return suggestions;
    }
    
    public List<Offering> RegistrationBean.completeOffering(String query) {
        List<Offering> suggestions = new ArrayList<Offering>();
        for (Offering offering : Offering.findAllOfferings()) {
            String offeringStr = String.valueOf(offering.getRunDate());
            if (offeringStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(offering);
            }
        }
        return suggestions;
    }
    
    public String RegistrationBean.onEdit() {
        return null;
    }
    
    public boolean RegistrationBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void RegistrationBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String RegistrationBean.displayList() {
        createDialogVisible = false;
        findAllRegistrations();
        return "registration";
    }
    
    public String RegistrationBean.displayCreateDialog() {
        registration = new Registration();
        createDialogVisible = true;
        return "registration";
    }
    
    public String RegistrationBean.persist() {
        String message = "";
        if (registration.getId() != null) {
            registration.merge();
            message = "message_successfully_updated";
        } else {
            registration.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Registration");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRegistrations();
    }
    
    public String RegistrationBean.delete() {
        registration.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Registration");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRegistrations();
    }
    
    public void RegistrationBean.reset() {
        registration = null;
        createDialogVisible = false;
    }
    
    public void RegistrationBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
