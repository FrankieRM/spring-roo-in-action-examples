// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.jsf;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.rooinaction.coursemanager.jsf.TagBean;
import org.rooinaction.coursemanager.jsf.converter.CourseConverter;
import org.rooinaction.coursemanager.jsf.util.MessageFactory;
import org.rooinaction.coursemanager.model.Course;
import org.rooinaction.coursemanager.model.Tag;

privileged aspect TagBean_Roo_ManagedBean {
    
    declare @type: TagBean: @ManagedBean(name = "tagBean");
    
    declare @type: TagBean: @SessionScoped;
    
    private String TagBean.name = "Tags";
    
    private Tag TagBean.tag;
    
    private List<Tag> TagBean.allTags;
    
    private boolean TagBean.dataVisible = false;
    
    private List<String> TagBean.columns;
    
    private HtmlPanelGrid TagBean.createPanelGrid;
    
    private HtmlPanelGrid TagBean.editPanelGrid;
    
    private HtmlPanelGrid TagBean.viewPanelGrid;
    
    private boolean TagBean.createDialogVisible = false;
    
    private List<Course> TagBean.selectedCourses;
    
    @PostConstruct
    public void TagBean.init() {
        columns = new ArrayList<String>();
        columns.add("tag");
        columns.add("description");
    }
    
    public String TagBean.getName() {
        return name;
    }
    
    public List<String> TagBean.getColumns() {
        return columns;
    }
    
    public List<Tag> TagBean.getAllTags() {
        return allTags;
    }
    
    public void TagBean.setAllTags(List<Tag> allTags) {
        this.allTags = allTags;
    }
    
    public String TagBean.findAllTags() {
        allTags = Tag.findAllTags();
        dataVisible = !allTags.isEmpty();
        return null;
    }
    
    public boolean TagBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TagBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TagBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TagBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TagBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TagBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TagBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TagBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TagBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tagCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tagCreateOutput.setFor("tagCreateInput");
        tagCreateOutput.setId("tagCreateOutput");
        tagCreateOutput.setValue("Tag:");
        htmlPanelGrid.getChildren().add(tagCreateOutput);
        
        InputText tagCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tagCreateInput.setId("tagCreateInput");
        tagCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.tag}", String.class));
        LengthValidator tagCreateInputValidator = new LengthValidator();
        tagCreateInputValidator.setMinimum(1);
        tagCreateInputValidator.setMaximum(25);
        tagCreateInput.addValidator(tagCreateInputValidator);
        tagCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tagCreateInput);
        
        Message tagCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tagCreateInputMessage.setId("tagCreateInputMessage");
        tagCreateInputMessage.setFor("tagCreateInput");
        tagCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tagCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(250);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel coursesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        coursesCreateOutput.setFor("coursesCreateInput");
        coursesCreateOutput.setId("coursesCreateOutput");
        coursesCreateOutput.setValue("Courses:");
        htmlPanelGrid.getChildren().add(coursesCreateOutput);
        
        SelectManyMenu coursesCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        coursesCreateInput.setId("coursesCreateInput");
        coursesCreateInput.setConverter(new CourseConverter());
        coursesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.selectedCourses}", List.class));
        UISelectItems coursesCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        coursesCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.allCourses}", List.class));
        coursesCreateInput.setRequired(false);
        coursesCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "course", String.class));
        coursesCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{course}", String.class));
        coursesCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{course}", Course.class));
        coursesCreateInput.getChildren().add(coursesCreateInputItems);
        htmlPanelGrid.getChildren().add(coursesCreateInput);
        
        Message coursesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        coursesCreateInputMessage.setId("coursesCreateInputMessage");
        coursesCreateInputMessage.setFor("coursesCreateInput");
        coursesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(coursesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TagBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tagEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tagEditOutput.setFor("tagEditInput");
        tagEditOutput.setId("tagEditOutput");
        tagEditOutput.setValue("Tag:");
        htmlPanelGrid.getChildren().add(tagEditOutput);
        
        InputText tagEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tagEditInput.setId("tagEditInput");
        tagEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.tag}", String.class));
        LengthValidator tagEditInputValidator = new LengthValidator();
        tagEditInputValidator.setMinimum(1);
        tagEditInputValidator.setMaximum(25);
        tagEditInput.addValidator(tagEditInputValidator);
        tagEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tagEditInput);
        
        Message tagEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tagEditInputMessage.setId("tagEditInputMessage");
        tagEditInputMessage.setFor("tagEditInput");
        tagEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tagEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(250);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel coursesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        coursesEditOutput.setFor("coursesEditInput");
        coursesEditOutput.setId("coursesEditOutput");
        coursesEditOutput.setValue("Courses:");
        htmlPanelGrid.getChildren().add(coursesEditOutput);
        
        SelectManyMenu coursesEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        coursesEditInput.setId("coursesEditInput");
        coursesEditInput.setConverter(new CourseConverter());
        coursesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.selectedCourses}", List.class));
        UISelectItems coursesEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        coursesEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.allCourses}", List.class));
        coursesEditInput.setRequired(false);
        coursesEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "course", String.class));
        coursesEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{course}", String.class));
        coursesEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{course}", Course.class));
        coursesEditInput.getChildren().add(coursesEditInputItems);
        htmlPanelGrid.getChildren().add(coursesEditInput);
        
        Message coursesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        coursesEditInputMessage.setId("coursesEditInputMessage");
        coursesEditInputMessage.setFor("coursesEditInput");
        coursesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(coursesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TagBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tagLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagLabel.setId("tagLabel");
        tagLabel.setValue("Tag:");
        htmlPanelGrid.getChildren().add(tagLabel);
        
        HtmlOutputText tagValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagValue.setId("tagValue");
        tagValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.tag}", String.class));
        htmlPanelGrid.getChildren().add(tagValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText coursesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coursesLabel.setId("coursesLabel");
        coursesLabel.setValue("Courses:");
        htmlPanelGrid.getChildren().add(coursesLabel);
        
        SelectManyMenu coursesValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        coursesValue.setId("coursesValue");
        coursesValue.setConverter(new CourseConverter());
        coursesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.selectedCourses}", List.class));
        UISelectItems coursesValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        coursesValue.setReadonly(true);
        coursesValue.setDisabled(true);
        coursesValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tagBean.tag.courses}", Set.class));
        coursesValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "course", String.class));
        coursesValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{course}", String.class));
        coursesValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{course}", Course.class));
        coursesValue.getChildren().add(coursesValueItems);
        htmlPanelGrid.getChildren().add(coursesValue);
        
        return htmlPanelGrid;
    }
    
    public Tag TagBean.getTag() {
        if (tag == null) {
            tag = new Tag();
        }
        return tag;
    }
    
    public void TagBean.setTag(Tag tag) {
        this.tag = tag;
    }
    
    public List<Course> TagBean.getSelectedCourses() {
        return selectedCourses;
    }
    
    public void TagBean.setSelectedCourses(List<Course> selectedCourses) {
        if (selectedCourses != null) {
            tag.setCourses(new HashSet<Course>(selectedCourses));
        }
        this.selectedCourses = selectedCourses;
    }
    
    public String TagBean.onEdit() {
        if (tag != null && tag.getCourses() != null) {
            selectedCourses = new ArrayList<Course>(tag.getCourses());
        }
        return null;
    }
    
    public boolean TagBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TagBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TagBean.displayList() {
        createDialogVisible = false;
        findAllTags();
        return "tag";
    }
    
    public String TagBean.displayCreateDialog() {
        tag = new Tag();
        createDialogVisible = true;
        return "tag";
    }
    
    public String TagBean.persist() {
        String message = "";
        if (tag.getId() != null) {
            tag.merge();
            message = "message_successfully_updated";
        } else {
            tag.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Tag");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTags();
    }
    
    public String TagBean.delete() {
        tag.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Tag");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTags();
    }
    
    public void TagBean.reset() {
        tag = null;
        selectedCourses = null;
        createDialogVisible = false;
    }
    
    public void TagBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
