// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.jsf;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.rooinaction.coursemanager.jsf.PaymentBean;
import org.rooinaction.coursemanager.jsf.util.MessageFactory;
import org.rooinaction.coursemanager.model.Payment;

privileged aspect PaymentBean_Roo_ManagedBean {
    
    declare @type: PaymentBean: @ManagedBean(name = "paymentBean");
    
    declare @type: PaymentBean: @SessionScoped;
    
    private String PaymentBean.name = "Payments";
    
    private Payment PaymentBean.payment;
    
    private List<Payment> PaymentBean.allPayments;
    
    private boolean PaymentBean.dataVisible = false;
    
    private List<String> PaymentBean.columns;
    
    private HtmlPanelGrid PaymentBean.createPanelGrid;
    
    private HtmlPanelGrid PaymentBean.editPanelGrid;
    
    private HtmlPanelGrid PaymentBean.viewPanelGrid;
    
    private boolean PaymentBean.createDialogVisible = false;
    
    @PostConstruct
    public void PaymentBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String PaymentBean.getName() {
        return name;
    }
    
    public List<String> PaymentBean.getColumns() {
        return columns;
    }
    
    public List<Payment> PaymentBean.getAllPayments() {
        return allPayments;
    }
    
    public void PaymentBean.setAllPayments(List<Payment> allPayments) {
        this.allPayments = allPayments;
    }
    
    public String PaymentBean.findAllPayments() {
        allPayments = Payment.findAllPayments();
        dataVisible = !allPayments.isEmpty();
        return null;
    }
    
    public boolean PaymentBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PaymentBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PaymentBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PaymentBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PaymentBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PaymentBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PaymentBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PaymentBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PaymentBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        return (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
    }
    
    public HtmlPanelGrid PaymentBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        return (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
    }
    
    public HtmlPanelGrid PaymentBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        return (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
    }
    
    public Payment PaymentBean.getPayment() {
        if (payment == null) {
            payment = new Payment();
        }
        return payment;
    }
    
    public void PaymentBean.setPayment(Payment payment) {
        this.payment = payment;
    }
    
    public String PaymentBean.onEdit() {
        return null;
    }
    
    public boolean PaymentBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PaymentBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PaymentBean.displayList() {
        createDialogVisible = false;
        findAllPayments();
        return "payment";
    }
    
    public String PaymentBean.displayCreateDialog() {
        payment = new Payment();
        createDialogVisible = true;
        return "payment";
    }
    
    public String PaymentBean.persist() {
        String message = "";
        if (payment.getId() != null) {
            payment.merge();
            message = "message_successfully_updated";
        } else {
            payment.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Payment");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPayments();
    }
    
    public String PaymentBean.delete() {
        payment.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Payment");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPayments();
    }
    
    public void PaymentBean.reset() {
        payment = null;
        createDialogVisible = false;
    }
    
    public void PaymentBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
