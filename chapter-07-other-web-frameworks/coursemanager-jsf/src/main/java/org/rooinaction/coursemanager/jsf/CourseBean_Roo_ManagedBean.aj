// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.jsf;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.DoubleRangeValidator;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.LongRangeValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.rooinaction.coursemanager.jsf.CourseBean;
import org.rooinaction.coursemanager.jsf.converter.TrainingProgramConverter;
import org.rooinaction.coursemanager.jsf.util.MessageFactory;
import org.rooinaction.coursemanager.model.Course;
import org.rooinaction.coursemanager.model.CourseTypeEnum;
import org.rooinaction.coursemanager.model.Offering;
import org.rooinaction.coursemanager.model.Tag;
import org.rooinaction.coursemanager.model.TrainingProgram;

privileged aspect CourseBean_Roo_ManagedBean {
    
    declare @type: CourseBean: @ManagedBean(name = "courseBean");
    
    declare @type: CourseBean: @SessionScoped;
    
    private String CourseBean.name = "Courses";
    
    private Course CourseBean.course;
    
    private List<Course> CourseBean.allCourses;
    
    private boolean CourseBean.dataVisible = false;
    
    private List<String> CourseBean.columns;
    
    private HtmlPanelGrid CourseBean.createPanelGrid;
    
    private HtmlPanelGrid CourseBean.editPanelGrid;
    
    private HtmlPanelGrid CourseBean.viewPanelGrid;
    
    private boolean CourseBean.createDialogVisible = false;
    
    private List<Tag> CourseBean.selectedTags;
    
    private List<Offering> CourseBean.selectedOfferings;
    
    @PostConstruct
    public void CourseBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
        columns.add("cost");
        columns.add("maximumCapacity");
    }
    
    public String CourseBean.getName() {
        return name;
    }
    
    public List<String> CourseBean.getColumns() {
        return columns;
    }
    
    public List<Course> CourseBean.getAllCourses() {
        return allCourses;
    }
    
    public void CourseBean.setAllCourses(List<Course> allCourses) {
        this.allCourses = allCourses;
    }
    
    public String CourseBean.findAllCourses() {
        allCourses = Course.findAllCourses();
        dataVisible = !allCourses.isEmpty();
        return null;
    }
    
    public boolean CourseBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CourseBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CourseBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CourseBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CourseBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CourseBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(1);
        nameCreateInputValidator.setMaximum(60);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(1000);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        OutputLabel costCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        costCreateOutput.setFor("costCreateInput");
        costCreateOutput.setId("costCreateOutput");
        costCreateOutput.setValue("Cost:");
        htmlPanelGrid.getChildren().add(costCreateOutput);
        
        InputText costCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        costCreateInput.setId("costCreateInput");
        costCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.cost}", BigDecimal.class));
        costCreateInput.setRequired(true);
        DoubleRangeValidator costCreateInputValidator = new DoubleRangeValidator();
        costCreateInputValidator.setMinimum(0.0);
        costCreateInputValidator.setMaximum(99999.0);
        costCreateInput.addValidator(costCreateInputValidator);
        htmlPanelGrid.getChildren().add(costCreateInput);
        
        Message costCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        costCreateInputMessage.setId("costCreateInputMessage");
        costCreateInputMessage.setFor("costCreateInput");
        costCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(costCreateInputMessage);
        
        OutputLabel maximumCapacityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        maximumCapacityCreateOutput.setFor("maximumCapacityCreateInput");
        maximumCapacityCreateOutput.setId("maximumCapacityCreateOutput");
        maximumCapacityCreateOutput.setValue("Maximum Capacity:");
        htmlPanelGrid.getChildren().add(maximumCapacityCreateOutput);
        
        Spinner maximumCapacityCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        maximumCapacityCreateInput.setId("maximumCapacityCreateInput");
        maximumCapacityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.maximumCapacity}", Integer.class));
        maximumCapacityCreateInput.setRequired(true);
        maximumCapacityCreateInput.setMin(1.0);
        maximumCapacityCreateInput.setMax(9999.0);
        LongRangeValidator maximumCapacityCreateInputValidator = new LongRangeValidator();
        maximumCapacityCreateInputValidator.setMinimum(1);
        maximumCapacityCreateInputValidator.setMaximum(9999);
        maximumCapacityCreateInput.addValidator(maximumCapacityCreateInputValidator);
        
        htmlPanelGrid.getChildren().add(maximumCapacityCreateInput);
        
        Message maximumCapacityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        maximumCapacityCreateInputMessage.setId("maximumCapacityCreateInputMessage");
        maximumCapacityCreateInputMessage.setFor("maximumCapacityCreateInput");
        maximumCapacityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(maximumCapacityCreateInputMessage);
        
        OutputLabel courseTypeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        courseTypeCreateOutput.setFor("courseTypeCreateInput");
        courseTypeCreateOutput.setId("courseTypeCreateOutput");
        courseTypeCreateOutput.setValue("Course Type:");
        htmlPanelGrid.getChildren().add(courseTypeCreateOutput);
        
        AutoComplete courseTypeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        courseTypeCreateInput.setId("courseTypeCreateInput");
        courseTypeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.courseType}", CourseTypeEnum.class));
        courseTypeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeCourseType}", List.class, new Class[] { String.class }));
        courseTypeCreateInput.setDropdown(true);
        courseTypeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(courseTypeCreateInput);
        
        Message courseTypeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        courseTypeCreateInputMessage.setId("courseTypeCreateInputMessage");
        courseTypeCreateInputMessage.setFor("courseTypeCreateInput");
        courseTypeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(courseTypeCreateInputMessage);
        
        OutputLabel trainingProgramCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        trainingProgramCreateOutput.setFor("trainingProgramCreateInput");
        trainingProgramCreateOutput.setId("trainingProgramCreateOutput");
        trainingProgramCreateOutput.setValue("Training Program:");
        htmlPanelGrid.getChildren().add(trainingProgramCreateOutput);
        
        AutoComplete trainingProgramCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        trainingProgramCreateInput.setId("trainingProgramCreateInput");
        trainingProgramCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.trainingProgram}", TrainingProgram.class));
        trainingProgramCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeTrainingProgram}", List.class, new Class[] { String.class }));
        trainingProgramCreateInput.setDropdown(true);
        trainingProgramCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "trainingProgram", String.class));
        trainingProgramCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{trainingProgram.name}", String.class));
        trainingProgramCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{trainingProgram}", TrainingProgram.class));
        trainingProgramCreateInput.setConverter(new TrainingProgramConverter());
        trainingProgramCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(trainingProgramCreateInput);
        
        Message trainingProgramCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        trainingProgramCreateInputMessage.setId("trainingProgramCreateInputMessage");
        trainingProgramCreateInputMessage.setFor("trainingProgramCreateInput");
        trainingProgramCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(trainingProgramCreateInputMessage);
        
        HtmlOutputText tagsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagsCreateOutput.setId("tagsCreateOutput");
        tagsCreateOutput.setValue("Tags:");
        htmlPanelGrid.getChildren().add(tagsCreateOutput);
        
        HtmlOutputText tagsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagsCreateInput.setId("tagsCreateInput");
        tagsCreateInput.setValue("This relationship is managed from the Tag side");
        htmlPanelGrid.getChildren().add(tagsCreateInput);
        
        Message tagsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tagsCreateInputMessage.setId("tagsCreateInputMessage");
        tagsCreateInputMessage.setFor("tagsCreateInput");
        tagsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tagsCreateInputMessage);
        
        HtmlOutputText offeringsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringsCreateOutput.setId("offeringsCreateOutput");
        offeringsCreateOutput.setValue("Offerings:");
        htmlPanelGrid.getChildren().add(offeringsCreateOutput);
        
        HtmlOutputText offeringsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringsCreateInput.setId("offeringsCreateInput");
        offeringsCreateInput.setValue("This relationship is managed from the Offering side");
        htmlPanelGrid.getChildren().add(offeringsCreateInput);
        
        Message offeringsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        offeringsCreateInputMessage.setId("offeringsCreateInputMessage");
        offeringsCreateInputMessage.setFor("offeringsCreateInput");
        offeringsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(offeringsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(1);
        nameEditInputValidator.setMaximum(60);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(1000);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        OutputLabel costEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        costEditOutput.setFor("costEditInput");
        costEditOutput.setId("costEditOutput");
        costEditOutput.setValue("Cost:");
        htmlPanelGrid.getChildren().add(costEditOutput);
        
        InputText costEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        costEditInput.setId("costEditInput");
        costEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.cost}", BigDecimal.class));
        costEditInput.setRequired(true);
        DoubleRangeValidator costEditInputValidator = new DoubleRangeValidator();
        costEditInputValidator.setMinimum(0.0);
        costEditInputValidator.setMaximum(99999.0);
        costEditInput.addValidator(costEditInputValidator);
        htmlPanelGrid.getChildren().add(costEditInput);
        
        Message costEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        costEditInputMessage.setId("costEditInputMessage");
        costEditInputMessage.setFor("costEditInput");
        costEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(costEditInputMessage);
        
        OutputLabel maximumCapacityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        maximumCapacityEditOutput.setFor("maximumCapacityEditInput");
        maximumCapacityEditOutput.setId("maximumCapacityEditOutput");
        maximumCapacityEditOutput.setValue("Maximum Capacity:");
        htmlPanelGrid.getChildren().add(maximumCapacityEditOutput);
        
        Spinner maximumCapacityEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        maximumCapacityEditInput.setId("maximumCapacityEditInput");
        maximumCapacityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.maximumCapacity}", Integer.class));
        maximumCapacityEditInput.setRequired(true);
        maximumCapacityEditInput.setMin(1.0);
        maximumCapacityEditInput.setMax(9999.0);
        LongRangeValidator maximumCapacityEditInputValidator = new LongRangeValidator();
        maximumCapacityEditInputValidator.setMinimum(1);
        maximumCapacityEditInputValidator.setMaximum(9999);
        maximumCapacityEditInput.addValidator(maximumCapacityEditInputValidator);
        
        htmlPanelGrid.getChildren().add(maximumCapacityEditInput);
        
        Message maximumCapacityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        maximumCapacityEditInputMessage.setId("maximumCapacityEditInputMessage");
        maximumCapacityEditInputMessage.setFor("maximumCapacityEditInput");
        maximumCapacityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(maximumCapacityEditInputMessage);
        
        OutputLabel courseTypeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        courseTypeEditOutput.setFor("courseTypeEditInput");
        courseTypeEditOutput.setId("courseTypeEditOutput");
        courseTypeEditOutput.setValue("Course Type:");
        htmlPanelGrid.getChildren().add(courseTypeEditOutput);
        
        AutoComplete courseTypeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        courseTypeEditInput.setId("courseTypeEditInput");
        courseTypeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.courseType}", CourseTypeEnum.class));
        courseTypeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeCourseType}", List.class, new Class[] { String.class }));
        courseTypeEditInput.setDropdown(true);
        courseTypeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(courseTypeEditInput);
        
        Message courseTypeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        courseTypeEditInputMessage.setId("courseTypeEditInputMessage");
        courseTypeEditInputMessage.setFor("courseTypeEditInput");
        courseTypeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(courseTypeEditInputMessage);
        
        OutputLabel trainingProgramEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        trainingProgramEditOutput.setFor("trainingProgramEditInput");
        trainingProgramEditOutput.setId("trainingProgramEditOutput");
        trainingProgramEditOutput.setValue("Training Program:");
        htmlPanelGrid.getChildren().add(trainingProgramEditOutput);
        
        AutoComplete trainingProgramEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        trainingProgramEditInput.setId("trainingProgramEditInput");
        trainingProgramEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.trainingProgram}", TrainingProgram.class));
        trainingProgramEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeTrainingProgram}", List.class, new Class[] { String.class }));
        trainingProgramEditInput.setDropdown(true);
        trainingProgramEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "trainingProgram", String.class));
        trainingProgramEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{trainingProgram.name}", String.class));
        trainingProgramEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{trainingProgram}", TrainingProgram.class));
        trainingProgramEditInput.setConverter(new TrainingProgramConverter());
        trainingProgramEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(trainingProgramEditInput);
        
        Message trainingProgramEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        trainingProgramEditInputMessage.setId("trainingProgramEditInputMessage");
        trainingProgramEditInputMessage.setFor("trainingProgramEditInput");
        trainingProgramEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(trainingProgramEditInputMessage);
        
        HtmlOutputText tagsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagsEditOutput.setId("tagsEditOutput");
        tagsEditOutput.setValue("Tags:");
        htmlPanelGrid.getChildren().add(tagsEditOutput);
        
        HtmlOutputText tagsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagsEditInput.setId("tagsEditInput");
        tagsEditInput.setValue("This relationship is managed from the Tag side");
        htmlPanelGrid.getChildren().add(tagsEditInput);
        
        Message tagsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tagsEditInputMessage.setId("tagsEditInputMessage");
        tagsEditInputMessage.setFor("tagsEditInput");
        tagsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tagsEditInputMessage);
        
        HtmlOutputText offeringsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringsEditOutput.setId("offeringsEditOutput");
        offeringsEditOutput.setValue("Offerings:");
        htmlPanelGrid.getChildren().add(offeringsEditOutput);
        
        HtmlOutputText offeringsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringsEditInput.setId("offeringsEditInput");
        offeringsEditInput.setValue("This relationship is managed from the Offering side");
        htmlPanelGrid.getChildren().add(offeringsEditInput);
        
        Message offeringsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        offeringsEditInputMessage.setId("offeringsEditInputMessage");
        offeringsEditInputMessage.setFor("offeringsEditInput");
        offeringsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(offeringsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText costLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        costLabel.setId("costLabel");
        costLabel.setValue("Cost:");
        htmlPanelGrid.getChildren().add(costLabel);
        
        HtmlOutputText costValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        costValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.cost}", String.class));
        htmlPanelGrid.getChildren().add(costValue);
        
        HtmlOutputText maximumCapacityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        maximumCapacityLabel.setId("maximumCapacityLabel");
        maximumCapacityLabel.setValue("Maximum Capacity:");
        htmlPanelGrid.getChildren().add(maximumCapacityLabel);
        
        HtmlOutputText maximumCapacityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        maximumCapacityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.maximumCapacity}", String.class));
        htmlPanelGrid.getChildren().add(maximumCapacityValue);
        
        HtmlOutputText courseTypeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        courseTypeLabel.setId("courseTypeLabel");
        courseTypeLabel.setValue("Course Type:");
        htmlPanelGrid.getChildren().add(courseTypeLabel);
        
        HtmlOutputText courseTypeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        courseTypeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.courseType}", String.class));
        htmlPanelGrid.getChildren().add(courseTypeValue);
        
        HtmlOutputText trainingProgramLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        trainingProgramLabel.setId("trainingProgramLabel");
        trainingProgramLabel.setValue("Training Program:");
        htmlPanelGrid.getChildren().add(trainingProgramLabel);
        
        HtmlOutputText trainingProgramValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        trainingProgramValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.trainingProgram}", TrainingProgram.class));
        trainingProgramValue.setConverter(new TrainingProgramConverter());
        htmlPanelGrid.getChildren().add(trainingProgramValue);
        
        HtmlOutputText tagsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagsLabel.setId("tagsLabel");
        tagsLabel.setValue("Tags:");
        htmlPanelGrid.getChildren().add(tagsLabel);
        
        HtmlOutputText tagsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tagsValue.setId("tagsValue");
        tagsValue.setValue("This relationship is managed from the Tag side");
        htmlPanelGrid.getChildren().add(tagsValue);
        
        HtmlOutputText offeringsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringsLabel.setId("offeringsLabel");
        offeringsLabel.setValue("Offerings:");
        htmlPanelGrid.getChildren().add(offeringsLabel);
        
        HtmlOutputText offeringsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        offeringsValue.setId("offeringsValue");
        offeringsValue.setValue("This relationship is managed from the Offering side");
        htmlPanelGrid.getChildren().add(offeringsValue);
        
        return htmlPanelGrid;
    }
    
    public Course CourseBean.getCourse() {
        if (course == null) {
            course = new Course();
        }
        return course;
    }
    
    public void CourseBean.setCourse(Course course) {
        this.course = course;
    }
    
    public List<CourseTypeEnum> CourseBean.completeCourseType(String query) {
        List<CourseTypeEnum> suggestions = new ArrayList<CourseTypeEnum>();
        for (CourseTypeEnum courseTypeEnum : CourseTypeEnum.values()) {
            if (courseTypeEnum.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(courseTypeEnum);
            }
        }
        return suggestions;
    }
    
    public List<TrainingProgram> CourseBean.completeTrainingProgram(String query) {
        List<TrainingProgram> suggestions = new ArrayList<TrainingProgram>();
        for (TrainingProgram trainingProgram : TrainingProgram.findAllTrainingPrograms()) {
            String trainingProgramStr = String.valueOf(trainingProgram.getName());
            if (trainingProgramStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(trainingProgram);
            }
        }
        return suggestions;
    }
    
    public List<Tag> CourseBean.getSelectedTags() {
        return selectedTags;
    }
    
    public void CourseBean.setSelectedTags(List<Tag> selectedTags) {
        if (selectedTags != null) {
            course.setTags(new HashSet<Tag>(selectedTags));
        }
        this.selectedTags = selectedTags;
    }
    
    public List<Offering> CourseBean.getSelectedOfferings() {
        return selectedOfferings;
    }
    
    public void CourseBean.setSelectedOfferings(List<Offering> selectedOfferings) {
        if (selectedOfferings != null) {
            course.setOfferings(new HashSet<Offering>(selectedOfferings));
        }
        this.selectedOfferings = selectedOfferings;
    }
    
    public String CourseBean.onEdit() {
        if (course != null && course.getTags() != null) {
            selectedTags = new ArrayList<Tag>(course.getTags());
        }
        if (course != null && course.getOfferings() != null) {
            selectedOfferings = new ArrayList<Offering>(course.getOfferings());
        }
        return null;
    }
    
    public boolean CourseBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CourseBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CourseBean.displayList() {
        createDialogVisible = false;
        findAllCourses();
        return "course";
    }
    
    public String CourseBean.displayCreateDialog() {
        course = new Course();
        createDialogVisible = true;
        return "course";
    }
    
    public String CourseBean.persist() {
        String message = "";
        if (course.getId() != null) {
            course.merge();
            message = "message_successfully_updated";
        } else {
            course.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Course");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCourses();
    }
    
    public String CourseBean.delete() {
        course.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Course");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCourses();
    }
    
    public void CourseBean.reset() {
        course = null;
        selectedTags = null;
        selectedOfferings = null;
        createDialogVisible = false;
    }
    
    public void CourseBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
