// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.jsf;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.rooinaction.coursemanager.jsf.InvoiceBean;
import org.rooinaction.coursemanager.jsf.util.MessageFactory;
import org.rooinaction.coursemanager.model.Invoice;

privileged aspect InvoiceBean_Roo_ManagedBean {
    
    declare @type: InvoiceBean: @ManagedBean(name = "invoiceBean");
    
    declare @type: InvoiceBean: @SessionScoped;
    
    private String InvoiceBean.name = "Invoices";
    
    private Invoice InvoiceBean.invoice;
    
    private List<Invoice> InvoiceBean.allInvoices;
    
    private boolean InvoiceBean.dataVisible = false;
    
    private List<String> InvoiceBean.columns;
    
    private HtmlPanelGrid InvoiceBean.createPanelGrid;
    
    private HtmlPanelGrid InvoiceBean.editPanelGrid;
    
    private HtmlPanelGrid InvoiceBean.viewPanelGrid;
    
    private boolean InvoiceBean.createDialogVisible = false;
    
    @PostConstruct
    public void InvoiceBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String InvoiceBean.getName() {
        return name;
    }
    
    public List<String> InvoiceBean.getColumns() {
        return columns;
    }
    
    public List<Invoice> InvoiceBean.getAllInvoices() {
        return allInvoices;
    }
    
    public void InvoiceBean.setAllInvoices(List<Invoice> allInvoices) {
        this.allInvoices = allInvoices;
    }
    
    public String InvoiceBean.findAllInvoices() {
        allInvoices = Invoice.findAllInvoices();
        dataVisible = !allInvoices.isEmpty();
        return null;
    }
    
    public boolean InvoiceBean.isDataVisible() {
        return dataVisible;
    }
    
    public void InvoiceBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid InvoiceBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void InvoiceBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid InvoiceBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void InvoiceBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid InvoiceBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void InvoiceBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid InvoiceBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        return (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
    }
    
    public HtmlPanelGrid InvoiceBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        return (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
    }
    
    public HtmlPanelGrid InvoiceBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        return (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
    }
    
    public Invoice InvoiceBean.getInvoice() {
        if (invoice == null) {
            invoice = new Invoice();
        }
        return invoice;
    }
    
    public void InvoiceBean.setInvoice(Invoice invoice) {
        this.invoice = invoice;
    }
    
    public String InvoiceBean.onEdit() {
        return null;
    }
    
    public boolean InvoiceBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void InvoiceBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String InvoiceBean.displayList() {
        createDialogVisible = false;
        findAllInvoices();
        return "invoice";
    }
    
    public String InvoiceBean.displayCreateDialog() {
        invoice = new Invoice();
        createDialogVisible = true;
        return "invoice";
    }
    
    public String InvoiceBean.persist() {
        String message = "";
        if (invoice.getId() != null) {
            invoice.merge();
            message = "message_successfully_updated";
        } else {
            invoice.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Invoice");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllInvoices();
    }
    
    public String InvoiceBean.delete() {
        invoice.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Invoice");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllInvoices();
    }
    
    public void InvoiceBean.reset() {
        invoice = null;
        createDialogVisible = false;
    }
    
    public void InvoiceBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
