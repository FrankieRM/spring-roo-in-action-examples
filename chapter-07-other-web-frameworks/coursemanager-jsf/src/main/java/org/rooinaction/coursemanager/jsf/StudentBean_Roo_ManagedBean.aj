// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.jsf;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.rooinaction.coursemanager.jsf.StudentBean;
import org.rooinaction.coursemanager.jsf.util.MessageFactory;
import org.rooinaction.coursemanager.model.Registration;
import org.rooinaction.coursemanager.model.Student;

privileged aspect StudentBean_Roo_ManagedBean {
    
    declare @type: StudentBean: @ManagedBean(name = "studentBean");
    
    declare @type: StudentBean: @SessionScoped;
    
    private String StudentBean.name = "Students";
    
    private Student StudentBean.student;
    
    private List<Student> StudentBean.allStudents;
    
    private boolean StudentBean.dataVisible = false;
    
    private List<String> StudentBean.columns;
    
    private HtmlPanelGrid StudentBean.createPanelGrid;
    
    private HtmlPanelGrid StudentBean.editPanelGrid;
    
    private HtmlPanelGrid StudentBean.viewPanelGrid;
    
    private boolean StudentBean.createDialogVisible = false;
    
    private List<Registration> StudentBean.selectedRegistrations;
    
    @PostConstruct
    public void StudentBean.init() {
        columns = new ArrayList<String>();
        columns.add("firstName");
        columns.add("middleNameOrInitial");
        columns.add("lastName");
        columns.add("addressLine1");
        columns.add("addressLine2");
    }
    
    public String StudentBean.getName() {
        return name;
    }
    
    public List<String> StudentBean.getColumns() {
        return columns;
    }
    
    public List<Student> StudentBean.getAllStudents() {
        return allStudents;
    }
    
    public void StudentBean.setAllStudents(List<Student> allStudents) {
        this.allStudents = allStudents;
    }
    
    public String StudentBean.findAllStudents() {
        allStudents = Student.findAllStudents();
        dataVisible = !allStudents.isEmpty();
        return null;
    }
    
    public boolean StudentBean.isDataVisible() {
        return dataVisible;
    }
    
    public void StudentBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid StudentBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void StudentBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid StudentBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void StudentBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid StudentBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void StudentBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid StudentBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel firstNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstNameCreateOutput.setFor("firstNameCreateInput");
        firstNameCreateOutput.setId("firstNameCreateOutput");
        firstNameCreateOutput.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameCreateOutput);
        
        InputText firstNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstNameCreateInput.setId("firstNameCreateInput");
        firstNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.firstName}", String.class));
        LengthValidator firstNameCreateInputValidator = new LengthValidator();
        firstNameCreateInputValidator.setMinimum(1);
        firstNameCreateInputValidator.setMaximum(30);
        firstNameCreateInput.addValidator(firstNameCreateInputValidator);
        firstNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstNameCreateInput);
        
        Message firstNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameCreateInputMessage.setId("firstNameCreateInputMessage");
        firstNameCreateInputMessage.setFor("firstNameCreateInput");
        firstNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameCreateInputMessage);
        
        OutputLabel middleNameOrInitialCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        middleNameOrInitialCreateOutput.setFor("middleNameOrInitialCreateInput");
        middleNameOrInitialCreateOutput.setId("middleNameOrInitialCreateOutput");
        middleNameOrInitialCreateOutput.setValue("Middle Name Or Initial:");
        htmlPanelGrid.getChildren().add(middleNameOrInitialCreateOutput);
        
        InputText middleNameOrInitialCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        middleNameOrInitialCreateInput.setId("middleNameOrInitialCreateInput");
        middleNameOrInitialCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.middleNameOrInitial}", String.class));
        LengthValidator middleNameOrInitialCreateInputValidator = new LengthValidator();
        middleNameOrInitialCreateInputValidator.setMinimum(1);
        middleNameOrInitialCreateInputValidator.setMaximum(30);
        middleNameOrInitialCreateInput.addValidator(middleNameOrInitialCreateInputValidator);
        middleNameOrInitialCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(middleNameOrInitialCreateInput);
        
        Message middleNameOrInitialCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        middleNameOrInitialCreateInputMessage.setId("middleNameOrInitialCreateInputMessage");
        middleNameOrInitialCreateInputMessage.setFor("middleNameOrInitialCreateInput");
        middleNameOrInitialCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(middleNameOrInitialCreateInputMessage);
        
        OutputLabel lastNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastNameCreateOutput.setFor("lastNameCreateInput");
        lastNameCreateOutput.setId("lastNameCreateOutput");
        lastNameCreateOutput.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameCreateOutput);
        
        InputText lastNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastNameCreateInput.setId("lastNameCreateInput");
        lastNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.lastName}", String.class));
        LengthValidator lastNameCreateInputValidator = new LengthValidator();
        lastNameCreateInputValidator.setMinimum(1);
        lastNameCreateInputValidator.setMaximum(30);
        lastNameCreateInput.addValidator(lastNameCreateInputValidator);
        lastNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastNameCreateInput);
        
        Message lastNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameCreateInputMessage.setId("lastNameCreateInputMessage");
        lastNameCreateInputMessage.setFor("lastNameCreateInput");
        lastNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameCreateInputMessage);
        
        OutputLabel addressLine1CreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressLine1CreateOutput.setFor("addressLine1CreateInput");
        addressLine1CreateOutput.setId("addressLine1CreateOutput");
        addressLine1CreateOutput.setValue("Address Line1:");
        htmlPanelGrid.getChildren().add(addressLine1CreateOutput);
        
        InputTextarea addressLine1CreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        addressLine1CreateInput.setId("addressLine1CreateInput");
        addressLine1CreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.addressLine1}", String.class));
        LengthValidator addressLine1CreateInputValidator = new LengthValidator();
        addressLine1CreateInputValidator.setMinimum(1);
        addressLine1CreateInputValidator.setMaximum(60);
        addressLine1CreateInput.addValidator(addressLine1CreateInputValidator);
        addressLine1CreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressLine1CreateInput);
        
        Message addressLine1CreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressLine1CreateInputMessage.setId("addressLine1CreateInputMessage");
        addressLine1CreateInputMessage.setFor("addressLine1CreateInput");
        addressLine1CreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressLine1CreateInputMessage);
        
        OutputLabel addressLine2CreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressLine2CreateOutput.setFor("addressLine2CreateInput");
        addressLine2CreateOutput.setId("addressLine2CreateOutput");
        addressLine2CreateOutput.setValue("Address Line2:");
        htmlPanelGrid.getChildren().add(addressLine2CreateOutput);
        
        InputTextarea addressLine2CreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        addressLine2CreateInput.setId("addressLine2CreateInput");
        addressLine2CreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.addressLine2}", String.class));
        LengthValidator addressLine2CreateInputValidator = new LengthValidator();
        addressLine2CreateInputValidator.setMinimum(1);
        addressLine2CreateInputValidator.setMaximum(60);
        addressLine2CreateInput.addValidator(addressLine2CreateInputValidator);
        addressLine2CreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressLine2CreateInput);
        
        Message addressLine2CreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressLine2CreateInputMessage.setId("addressLine2CreateInputMessage");
        addressLine2CreateInputMessage.setFor("addressLine2CreateInput");
        addressLine2CreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressLine2CreateInputMessage);
        
        OutputLabel cityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cityCreateOutput.setFor("cityCreateInput");
        cityCreateOutput.setId("cityCreateOutput");
        cityCreateOutput.setValue("City:");
        htmlPanelGrid.getChildren().add(cityCreateOutput);
        
        InputTextarea cityCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        cityCreateInput.setId("cityCreateInput");
        cityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.city}", String.class));
        LengthValidator cityCreateInputValidator = new LengthValidator();
        cityCreateInputValidator.setMinimum(1);
        cityCreateInputValidator.setMaximum(40);
        cityCreateInput.addValidator(cityCreateInputValidator);
        cityCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cityCreateInput);
        
        Message cityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cityCreateInputMessage.setId("cityCreateInputMessage");
        cityCreateInputMessage.setFor("cityCreateInput");
        cityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cityCreateInputMessage);
        
        OutputLabel stateCodeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        stateCodeCreateOutput.setFor("stateCodeCreateInput");
        stateCodeCreateOutput.setId("stateCodeCreateOutput");
        stateCodeCreateOutput.setValue("State Code:");
        htmlPanelGrid.getChildren().add(stateCodeCreateOutput);
        
        InputText stateCodeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        stateCodeCreateInput.setId("stateCodeCreateInput");
        stateCodeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.stateCode}", String.class));
        LengthValidator stateCodeCreateInputValidator = new LengthValidator();
        stateCodeCreateInputValidator.setMinimum(2);
        stateCodeCreateInputValidator.setMaximum(2);
        stateCodeCreateInput.addValidator(stateCodeCreateInputValidator);
        stateCodeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(stateCodeCreateInput);
        
        Message stateCodeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        stateCodeCreateInputMessage.setId("stateCodeCreateInputMessage");
        stateCodeCreateInputMessage.setFor("stateCodeCreateInput");
        stateCodeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(stateCodeCreateInputMessage);
        
        OutputLabel postalCodeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        postalCodeCreateOutput.setFor("postalCodeCreateInput");
        postalCodeCreateOutput.setId("postalCodeCreateOutput");
        postalCodeCreateOutput.setValue("Postal Code:");
        htmlPanelGrid.getChildren().add(postalCodeCreateOutput);
        
        InputText postalCodeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        postalCodeCreateInput.setId("postalCodeCreateInput");
        postalCodeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.postalCode}", String.class));
        LengthValidator postalCodeCreateInputValidator = new LengthValidator();
        postalCodeCreateInputValidator.setMinimum(1);
        postalCodeCreateInputValidator.setMaximum(10);
        postalCodeCreateInput.addValidator(postalCodeCreateInputValidator);
        postalCodeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(postalCodeCreateInput);
        
        Message postalCodeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        postalCodeCreateInputMessage.setId("postalCodeCreateInputMessage");
        postalCodeCreateInputMessage.setFor("postalCodeCreateInput");
        postalCodeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(postalCodeCreateInputMessage);
        
        OutputLabel emailAddressCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailAddressCreateOutput.setFor("emailAddressCreateInput");
        emailAddressCreateOutput.setId("emailAddressCreateOutput");
        emailAddressCreateOutput.setValue("Email Address:");
        htmlPanelGrid.getChildren().add(emailAddressCreateOutput);
        
        InputTextarea emailAddressCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailAddressCreateInput.setId("emailAddressCreateInput");
        emailAddressCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emailAddress}", String.class));
        LengthValidator emailAddressCreateInputValidator = new LengthValidator();
        emailAddressCreateInputValidator.setMaximum(80);
        emailAddressCreateInput.addValidator(emailAddressCreateInputValidator);
        emailAddressCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailAddressCreateInput);
        
        Message emailAddressCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailAddressCreateInputMessage.setId("emailAddressCreateInputMessage");
        emailAddressCreateInputMessage.setFor("emailAddressCreateInput");
        emailAddressCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailAddressCreateInputMessage);
        
        OutputLabel emergencyContactNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emergencyContactNameCreateOutput.setFor("emergencyContactNameCreateInput");
        emergencyContactNameCreateOutput.setId("emergencyContactNameCreateOutput");
        emergencyContactNameCreateOutput.setValue("Emergency Contact Name:");
        htmlPanelGrid.getChildren().add(emergencyContactNameCreateOutput);
        
        InputText emergencyContactNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emergencyContactNameCreateInput.setId("emergencyContactNameCreateInput");
        emergencyContactNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emergencyContactName}", String.class));
        LengthValidator emergencyContactNameCreateInputValidator = new LengthValidator();
        emergencyContactNameCreateInputValidator.setMinimum(1);
        emergencyContactNameCreateInputValidator.setMaximum(30);
        emergencyContactNameCreateInput.addValidator(emergencyContactNameCreateInputValidator);
        emergencyContactNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emergencyContactNameCreateInput);
        
        Message emergencyContactNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emergencyContactNameCreateInputMessage.setId("emergencyContactNameCreateInputMessage");
        emergencyContactNameCreateInputMessage.setFor("emergencyContactNameCreateInput");
        emergencyContactNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emergencyContactNameCreateInputMessage);
        
        OutputLabel emergencyContactInfoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emergencyContactInfoCreateOutput.setFor("emergencyContactInfoCreateInput");
        emergencyContactInfoCreateOutput.setId("emergencyContactInfoCreateOutput");
        emergencyContactInfoCreateOutput.setValue("Emergency Contact Info:");
        htmlPanelGrid.getChildren().add(emergencyContactInfoCreateOutput);
        
        InputTextarea emergencyContactInfoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emergencyContactInfoCreateInput.setId("emergencyContactInfoCreateInput");
        emergencyContactInfoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emergencyContactInfo}", String.class));
        LengthValidator emergencyContactInfoCreateInputValidator = new LengthValidator();
        emergencyContactInfoCreateInputValidator.setMinimum(1);
        emergencyContactInfoCreateInputValidator.setMaximum(80);
        emergencyContactInfoCreateInput.addValidator(emergencyContactInfoCreateInputValidator);
        emergencyContactInfoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emergencyContactInfoCreateInput);
        
        Message emergencyContactInfoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emergencyContactInfoCreateInputMessage.setId("emergencyContactInfoCreateInputMessage");
        emergencyContactInfoCreateInputMessage.setFor("emergencyContactInfoCreateInput");
        emergencyContactInfoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emergencyContactInfoCreateInputMessage);
        
        OutputLabel dietaryRestrictionsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dietaryRestrictionsCreateOutput.setFor("dietaryRestrictionsCreateInput");
        dietaryRestrictionsCreateOutput.setId("dietaryRestrictionsCreateOutput");
        dietaryRestrictionsCreateOutput.setValue("Dietary Restrictions:");
        htmlPanelGrid.getChildren().add(dietaryRestrictionsCreateOutput);
        
        InputText dietaryRestrictionsCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        dietaryRestrictionsCreateInput.setId("dietaryRestrictionsCreateInput");
        dietaryRestrictionsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.dietaryRestrictions}", String.class));
        LengthValidator dietaryRestrictionsCreateInputValidator = new LengthValidator();
        dietaryRestrictionsCreateInputValidator.setMaximum(30);
        dietaryRestrictionsCreateInput.addValidator(dietaryRestrictionsCreateInputValidator);
        dietaryRestrictionsCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(dietaryRestrictionsCreateInput);
        
        Message dietaryRestrictionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dietaryRestrictionsCreateInputMessage.setId("dietaryRestrictionsCreateInputMessage");
        dietaryRestrictionsCreateInputMessage.setFor("dietaryRestrictionsCreateInput");
        dietaryRestrictionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dietaryRestrictionsCreateInputMessage);
        
        HtmlOutputText registrationsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        registrationsCreateOutput.setId("registrationsCreateOutput");
        registrationsCreateOutput.setValue("Registrations:");
        htmlPanelGrid.getChildren().add(registrationsCreateOutput);
        
        HtmlOutputText registrationsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        registrationsCreateInput.setId("registrationsCreateInput");
        registrationsCreateInput.setValue("This relationship is managed from the Registration side");
        htmlPanelGrid.getChildren().add(registrationsCreateInput);
        
        Message registrationsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        registrationsCreateInputMessage.setId("registrationsCreateInputMessage");
        registrationsCreateInputMessage.setFor("registrationsCreateInput");
        registrationsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(registrationsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid StudentBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel firstNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstNameEditOutput.setFor("firstNameEditInput");
        firstNameEditOutput.setId("firstNameEditOutput");
        firstNameEditOutput.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameEditOutput);
        
        InputText firstNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstNameEditInput.setId("firstNameEditInput");
        firstNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.firstName}", String.class));
        LengthValidator firstNameEditInputValidator = new LengthValidator();
        firstNameEditInputValidator.setMinimum(1);
        firstNameEditInputValidator.setMaximum(30);
        firstNameEditInput.addValidator(firstNameEditInputValidator);
        firstNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstNameEditInput);
        
        Message firstNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameEditInputMessage.setId("firstNameEditInputMessage");
        firstNameEditInputMessage.setFor("firstNameEditInput");
        firstNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameEditInputMessage);
        
        OutputLabel middleNameOrInitialEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        middleNameOrInitialEditOutput.setFor("middleNameOrInitialEditInput");
        middleNameOrInitialEditOutput.setId("middleNameOrInitialEditOutput");
        middleNameOrInitialEditOutput.setValue("Middle Name Or Initial:");
        htmlPanelGrid.getChildren().add(middleNameOrInitialEditOutput);
        
        InputText middleNameOrInitialEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        middleNameOrInitialEditInput.setId("middleNameOrInitialEditInput");
        middleNameOrInitialEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.middleNameOrInitial}", String.class));
        LengthValidator middleNameOrInitialEditInputValidator = new LengthValidator();
        middleNameOrInitialEditInputValidator.setMinimum(1);
        middleNameOrInitialEditInputValidator.setMaximum(30);
        middleNameOrInitialEditInput.addValidator(middleNameOrInitialEditInputValidator);
        middleNameOrInitialEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(middleNameOrInitialEditInput);
        
        Message middleNameOrInitialEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        middleNameOrInitialEditInputMessage.setId("middleNameOrInitialEditInputMessage");
        middleNameOrInitialEditInputMessage.setFor("middleNameOrInitialEditInput");
        middleNameOrInitialEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(middleNameOrInitialEditInputMessage);
        
        OutputLabel lastNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastNameEditOutput.setFor("lastNameEditInput");
        lastNameEditOutput.setId("lastNameEditOutput");
        lastNameEditOutput.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameEditOutput);
        
        InputText lastNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastNameEditInput.setId("lastNameEditInput");
        lastNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.lastName}", String.class));
        LengthValidator lastNameEditInputValidator = new LengthValidator();
        lastNameEditInputValidator.setMinimum(1);
        lastNameEditInputValidator.setMaximum(30);
        lastNameEditInput.addValidator(lastNameEditInputValidator);
        lastNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastNameEditInput);
        
        Message lastNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameEditInputMessage.setId("lastNameEditInputMessage");
        lastNameEditInputMessage.setFor("lastNameEditInput");
        lastNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameEditInputMessage);
        
        OutputLabel addressLine1EditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressLine1EditOutput.setFor("addressLine1EditInput");
        addressLine1EditOutput.setId("addressLine1EditOutput");
        addressLine1EditOutput.setValue("Address Line1:");
        htmlPanelGrid.getChildren().add(addressLine1EditOutput);
        
        InputTextarea addressLine1EditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        addressLine1EditInput.setId("addressLine1EditInput");
        addressLine1EditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.addressLine1}", String.class));
        LengthValidator addressLine1EditInputValidator = new LengthValidator();
        addressLine1EditInputValidator.setMinimum(1);
        addressLine1EditInputValidator.setMaximum(60);
        addressLine1EditInput.addValidator(addressLine1EditInputValidator);
        addressLine1EditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressLine1EditInput);
        
        Message addressLine1EditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressLine1EditInputMessage.setId("addressLine1EditInputMessage");
        addressLine1EditInputMessage.setFor("addressLine1EditInput");
        addressLine1EditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressLine1EditInputMessage);
        
        OutputLabel addressLine2EditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressLine2EditOutput.setFor("addressLine2EditInput");
        addressLine2EditOutput.setId("addressLine2EditOutput");
        addressLine2EditOutput.setValue("Address Line2:");
        htmlPanelGrid.getChildren().add(addressLine2EditOutput);
        
        InputTextarea addressLine2EditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        addressLine2EditInput.setId("addressLine2EditInput");
        addressLine2EditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.addressLine2}", String.class));
        LengthValidator addressLine2EditInputValidator = new LengthValidator();
        addressLine2EditInputValidator.setMinimum(1);
        addressLine2EditInputValidator.setMaximum(60);
        addressLine2EditInput.addValidator(addressLine2EditInputValidator);
        addressLine2EditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressLine2EditInput);
        
        Message addressLine2EditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressLine2EditInputMessage.setId("addressLine2EditInputMessage");
        addressLine2EditInputMessage.setFor("addressLine2EditInput");
        addressLine2EditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressLine2EditInputMessage);
        
        OutputLabel cityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cityEditOutput.setFor("cityEditInput");
        cityEditOutput.setId("cityEditOutput");
        cityEditOutput.setValue("City:");
        htmlPanelGrid.getChildren().add(cityEditOutput);
        
        InputTextarea cityEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        cityEditInput.setId("cityEditInput");
        cityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.city}", String.class));
        LengthValidator cityEditInputValidator = new LengthValidator();
        cityEditInputValidator.setMinimum(1);
        cityEditInputValidator.setMaximum(40);
        cityEditInput.addValidator(cityEditInputValidator);
        cityEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cityEditInput);
        
        Message cityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cityEditInputMessage.setId("cityEditInputMessage");
        cityEditInputMessage.setFor("cityEditInput");
        cityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cityEditInputMessage);
        
        OutputLabel stateCodeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        stateCodeEditOutput.setFor("stateCodeEditInput");
        stateCodeEditOutput.setId("stateCodeEditOutput");
        stateCodeEditOutput.setValue("State Code:");
        htmlPanelGrid.getChildren().add(stateCodeEditOutput);
        
        InputText stateCodeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        stateCodeEditInput.setId("stateCodeEditInput");
        stateCodeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.stateCode}", String.class));
        LengthValidator stateCodeEditInputValidator = new LengthValidator();
        stateCodeEditInputValidator.setMinimum(2);
        stateCodeEditInputValidator.setMaximum(2);
        stateCodeEditInput.addValidator(stateCodeEditInputValidator);
        stateCodeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(stateCodeEditInput);
        
        Message stateCodeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        stateCodeEditInputMessage.setId("stateCodeEditInputMessage");
        stateCodeEditInputMessage.setFor("stateCodeEditInput");
        stateCodeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(stateCodeEditInputMessage);
        
        OutputLabel postalCodeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        postalCodeEditOutput.setFor("postalCodeEditInput");
        postalCodeEditOutput.setId("postalCodeEditOutput");
        postalCodeEditOutput.setValue("Postal Code:");
        htmlPanelGrid.getChildren().add(postalCodeEditOutput);
        
        InputText postalCodeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        postalCodeEditInput.setId("postalCodeEditInput");
        postalCodeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.postalCode}", String.class));
        LengthValidator postalCodeEditInputValidator = new LengthValidator();
        postalCodeEditInputValidator.setMinimum(1);
        postalCodeEditInputValidator.setMaximum(10);
        postalCodeEditInput.addValidator(postalCodeEditInputValidator);
        postalCodeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(postalCodeEditInput);
        
        Message postalCodeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        postalCodeEditInputMessage.setId("postalCodeEditInputMessage");
        postalCodeEditInputMessage.setFor("postalCodeEditInput");
        postalCodeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(postalCodeEditInputMessage);
        
        OutputLabel emailAddressEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailAddressEditOutput.setFor("emailAddressEditInput");
        emailAddressEditOutput.setId("emailAddressEditOutput");
        emailAddressEditOutput.setValue("Email Address:");
        htmlPanelGrid.getChildren().add(emailAddressEditOutput);
        
        InputTextarea emailAddressEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailAddressEditInput.setId("emailAddressEditInput");
        emailAddressEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emailAddress}", String.class));
        LengthValidator emailAddressEditInputValidator = new LengthValidator();
        emailAddressEditInputValidator.setMaximum(80);
        emailAddressEditInput.addValidator(emailAddressEditInputValidator);
        emailAddressEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailAddressEditInput);
        
        Message emailAddressEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailAddressEditInputMessage.setId("emailAddressEditInputMessage");
        emailAddressEditInputMessage.setFor("emailAddressEditInput");
        emailAddressEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailAddressEditInputMessage);
        
        OutputLabel emergencyContactNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emergencyContactNameEditOutput.setFor("emergencyContactNameEditInput");
        emergencyContactNameEditOutput.setId("emergencyContactNameEditOutput");
        emergencyContactNameEditOutput.setValue("Emergency Contact Name:");
        htmlPanelGrid.getChildren().add(emergencyContactNameEditOutput);
        
        InputText emergencyContactNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emergencyContactNameEditInput.setId("emergencyContactNameEditInput");
        emergencyContactNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emergencyContactName}", String.class));
        LengthValidator emergencyContactNameEditInputValidator = new LengthValidator();
        emergencyContactNameEditInputValidator.setMinimum(1);
        emergencyContactNameEditInputValidator.setMaximum(30);
        emergencyContactNameEditInput.addValidator(emergencyContactNameEditInputValidator);
        emergencyContactNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emergencyContactNameEditInput);
        
        Message emergencyContactNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emergencyContactNameEditInputMessage.setId("emergencyContactNameEditInputMessage");
        emergencyContactNameEditInputMessage.setFor("emergencyContactNameEditInput");
        emergencyContactNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emergencyContactNameEditInputMessage);
        
        OutputLabel emergencyContactInfoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emergencyContactInfoEditOutput.setFor("emergencyContactInfoEditInput");
        emergencyContactInfoEditOutput.setId("emergencyContactInfoEditOutput");
        emergencyContactInfoEditOutput.setValue("Emergency Contact Info:");
        htmlPanelGrid.getChildren().add(emergencyContactInfoEditOutput);
        
        InputTextarea emergencyContactInfoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emergencyContactInfoEditInput.setId("emergencyContactInfoEditInput");
        emergencyContactInfoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emergencyContactInfo}", String.class));
        LengthValidator emergencyContactInfoEditInputValidator = new LengthValidator();
        emergencyContactInfoEditInputValidator.setMinimum(1);
        emergencyContactInfoEditInputValidator.setMaximum(80);
        emergencyContactInfoEditInput.addValidator(emergencyContactInfoEditInputValidator);
        emergencyContactInfoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emergencyContactInfoEditInput);
        
        Message emergencyContactInfoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emergencyContactInfoEditInputMessage.setId("emergencyContactInfoEditInputMessage");
        emergencyContactInfoEditInputMessage.setFor("emergencyContactInfoEditInput");
        emergencyContactInfoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emergencyContactInfoEditInputMessage);
        
        OutputLabel dietaryRestrictionsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dietaryRestrictionsEditOutput.setFor("dietaryRestrictionsEditInput");
        dietaryRestrictionsEditOutput.setId("dietaryRestrictionsEditOutput");
        dietaryRestrictionsEditOutput.setValue("Dietary Restrictions:");
        htmlPanelGrid.getChildren().add(dietaryRestrictionsEditOutput);
        
        InputText dietaryRestrictionsEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        dietaryRestrictionsEditInput.setId("dietaryRestrictionsEditInput");
        dietaryRestrictionsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.dietaryRestrictions}", String.class));
        LengthValidator dietaryRestrictionsEditInputValidator = new LengthValidator();
        dietaryRestrictionsEditInputValidator.setMaximum(30);
        dietaryRestrictionsEditInput.addValidator(dietaryRestrictionsEditInputValidator);
        dietaryRestrictionsEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(dietaryRestrictionsEditInput);
        
        Message dietaryRestrictionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dietaryRestrictionsEditInputMessage.setId("dietaryRestrictionsEditInputMessage");
        dietaryRestrictionsEditInputMessage.setFor("dietaryRestrictionsEditInput");
        dietaryRestrictionsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dietaryRestrictionsEditInputMessage);
        
        HtmlOutputText registrationsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        registrationsEditOutput.setId("registrationsEditOutput");
        registrationsEditOutput.setValue("Registrations:");
        htmlPanelGrid.getChildren().add(registrationsEditOutput);
        
        HtmlOutputText registrationsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        registrationsEditInput.setId("registrationsEditInput");
        registrationsEditInput.setValue("This relationship is managed from the Registration side");
        htmlPanelGrid.getChildren().add(registrationsEditInput);
        
        Message registrationsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        registrationsEditInputMessage.setId("registrationsEditInputMessage");
        registrationsEditInputMessage.setFor("registrationsEditInput");
        registrationsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(registrationsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid StudentBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText firstNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameLabel.setId("firstNameLabel");
        firstNameLabel.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameLabel);
        
        HtmlOutputText firstNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameValue.setId("firstNameValue");
        firstNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.firstName}", String.class));
        htmlPanelGrid.getChildren().add(firstNameValue);
        
        HtmlOutputText middleNameOrInitialLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        middleNameOrInitialLabel.setId("middleNameOrInitialLabel");
        middleNameOrInitialLabel.setValue("Middle Name Or Initial:");
        htmlPanelGrid.getChildren().add(middleNameOrInitialLabel);
        
        HtmlOutputText middleNameOrInitialValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        middleNameOrInitialValue.setId("middleNameOrInitialValue");
        middleNameOrInitialValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.middleNameOrInitial}", String.class));
        htmlPanelGrid.getChildren().add(middleNameOrInitialValue);
        
        HtmlOutputText lastNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameLabel.setId("lastNameLabel");
        lastNameLabel.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameLabel);
        
        HtmlOutputText lastNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameValue.setId("lastNameValue");
        lastNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.lastName}", String.class));
        htmlPanelGrid.getChildren().add(lastNameValue);
        
        HtmlOutputText addressLine1Label = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressLine1Label.setId("addressLine1Label");
        addressLine1Label.setValue("Address Line1:");
        htmlPanelGrid.getChildren().add(addressLine1Label);
        
        InputTextarea addressLine1Value = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        addressLine1Value.setId("addressLine1Value");
        addressLine1Value.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.addressLine1}", String.class));
        addressLine1Value.setReadonly(true);
        addressLine1Value.setDisabled(true);
        htmlPanelGrid.getChildren().add(addressLine1Value);
        
        HtmlOutputText addressLine2Label = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressLine2Label.setId("addressLine2Label");
        addressLine2Label.setValue("Address Line2:");
        htmlPanelGrid.getChildren().add(addressLine2Label);
        
        InputTextarea addressLine2Value = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        addressLine2Value.setId("addressLine2Value");
        addressLine2Value.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.addressLine2}", String.class));
        addressLine2Value.setReadonly(true);
        addressLine2Value.setDisabled(true);
        htmlPanelGrid.getChildren().add(addressLine2Value);
        
        HtmlOutputText cityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cityLabel.setId("cityLabel");
        cityLabel.setValue("City:");
        htmlPanelGrid.getChildren().add(cityLabel);
        
        InputTextarea cityValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        cityValue.setId("cityValue");
        cityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.city}", String.class));
        cityValue.setReadonly(true);
        cityValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(cityValue);
        
        HtmlOutputText stateCodeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        stateCodeLabel.setId("stateCodeLabel");
        stateCodeLabel.setValue("State Code:");
        htmlPanelGrid.getChildren().add(stateCodeLabel);
        
        HtmlOutputText stateCodeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        stateCodeValue.setId("stateCodeValue");
        stateCodeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.stateCode}", String.class));
        htmlPanelGrid.getChildren().add(stateCodeValue);
        
        HtmlOutputText postalCodeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        postalCodeLabel.setId("postalCodeLabel");
        postalCodeLabel.setValue("Postal Code:");
        htmlPanelGrid.getChildren().add(postalCodeLabel);
        
        HtmlOutputText postalCodeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        postalCodeValue.setId("postalCodeValue");
        postalCodeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.postalCode}", String.class));
        htmlPanelGrid.getChildren().add(postalCodeValue);
        
        HtmlOutputText emailAddressLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailAddressLabel.setId("emailAddressLabel");
        emailAddressLabel.setValue("Email Address:");
        htmlPanelGrid.getChildren().add(emailAddressLabel);
        
        InputTextarea emailAddressValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailAddressValue.setId("emailAddressValue");
        emailAddressValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emailAddress}", String.class));
        emailAddressValue.setReadonly(true);
        emailAddressValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(emailAddressValue);
        
        HtmlOutputText emergencyContactNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emergencyContactNameLabel.setId("emergencyContactNameLabel");
        emergencyContactNameLabel.setValue("Emergency Contact Name:");
        htmlPanelGrid.getChildren().add(emergencyContactNameLabel);
        
        HtmlOutputText emergencyContactNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emergencyContactNameValue.setId("emergencyContactNameValue");
        emergencyContactNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emergencyContactName}", String.class));
        htmlPanelGrid.getChildren().add(emergencyContactNameValue);
        
        HtmlOutputText emergencyContactInfoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emergencyContactInfoLabel.setId("emergencyContactInfoLabel");
        emergencyContactInfoLabel.setValue("Emergency Contact Info:");
        htmlPanelGrid.getChildren().add(emergencyContactInfoLabel);
        
        InputTextarea emergencyContactInfoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emergencyContactInfoValue.setId("emergencyContactInfoValue");
        emergencyContactInfoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.emergencyContactInfo}", String.class));
        emergencyContactInfoValue.setReadonly(true);
        emergencyContactInfoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(emergencyContactInfoValue);
        
        HtmlOutputText dietaryRestrictionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dietaryRestrictionsLabel.setId("dietaryRestrictionsLabel");
        dietaryRestrictionsLabel.setValue("Dietary Restrictions:");
        htmlPanelGrid.getChildren().add(dietaryRestrictionsLabel);
        
        HtmlOutputText dietaryRestrictionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dietaryRestrictionsValue.setId("dietaryRestrictionsValue");
        dietaryRestrictionsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{studentBean.student.dietaryRestrictions}", String.class));
        htmlPanelGrid.getChildren().add(dietaryRestrictionsValue);
        
        HtmlOutputText registrationsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        registrationsLabel.setId("registrationsLabel");
        registrationsLabel.setValue("Registrations:");
        htmlPanelGrid.getChildren().add(registrationsLabel);
        
        HtmlOutputText registrationsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        registrationsValue.setId("registrationsValue");
        registrationsValue.setValue("This relationship is managed from the Registration side");
        htmlPanelGrid.getChildren().add(registrationsValue);
        
        return htmlPanelGrid;
    }
    
    public Student StudentBean.getStudent() {
        if (student == null) {
            student = new Student();
        }
        return student;
    }
    
    public void StudentBean.setStudent(Student student) {
        this.student = student;
    }
    
    public List<Registration> StudentBean.getSelectedRegistrations() {
        return selectedRegistrations;
    }
    
    public void StudentBean.setSelectedRegistrations(List<Registration> selectedRegistrations) {
        if (selectedRegistrations != null) {
            student.setRegistrations(new HashSet<Registration>(selectedRegistrations));
        }
        this.selectedRegistrations = selectedRegistrations;
    }
    
    public String StudentBean.onEdit() {
        if (student != null && student.getRegistrations() != null) {
            selectedRegistrations = new ArrayList<Registration>(student.getRegistrations());
        }
        return null;
    }
    
    public boolean StudentBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void StudentBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String StudentBean.displayList() {
        createDialogVisible = false;
        findAllStudents();
        return "student";
    }
    
    public String StudentBean.displayCreateDialog() {
        student = new Student();
        createDialogVisible = true;
        return "student";
    }
    
    public String StudentBean.persist() {
        String message = "";
        if (student.getId() != null) {
            student.merge();
            message = "message_successfully_updated";
        } else {
            student.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Student");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllStudents();
    }
    
    public String StudentBean.delete() {
        student.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Student");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllStudents();
    }
    
    public void StudentBean.reset() {
        student = null;
        selectedRegistrations = null;
        createDialogVisible = false;
    }
    
    public void StudentBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
