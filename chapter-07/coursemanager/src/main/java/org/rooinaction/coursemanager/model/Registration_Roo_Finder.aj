// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooina.coursemanager.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.rooina.coursemanager.model.Offering;
import org.rooina.coursemanager.model.Registration;
import org.rooina.coursemanager.model.Student;

privileged aspect Registration_Roo_Finder {
    
    public static TypedQuery<Registration> Registration.findRegistrationsByStudentAndOffering(Student student, Offering offering) {
        if (student == null) throw new IllegalArgumentException("The student argument is required");
        if (offering == null) throw new IllegalArgumentException("The offering argument is required");
        EntityManager em = Registration.entityManager();
        TypedQuery<Registration> q = em.createQuery("SELECT o FROM Registration AS o WHERE o.student = :student AND o.offering = :offering", Registration.class);
        q.setParameter("student", student);
        q.setParameter("offering", offering);
        return q;
    }
    
    public static TypedQuery<Registration> Registration.findRegistrationsByStudentAndOfferingNot(Student student, Offering offering) {
        if (student == null) throw new IllegalArgumentException("The student argument is required");
        if (offering == null) throw new IllegalArgumentException("The offering argument is required");
        EntityManager em = Registration.entityManager();
        TypedQuery<Registration> q = em.createQuery("SELECT o FROM Registration AS o WHERE o.student = :student AND o.offering IS NOT :offering", Registration.class);
        q.setParameter("student", student);
        q.setParameter("offering", offering);
        return q;
    }
    
}
